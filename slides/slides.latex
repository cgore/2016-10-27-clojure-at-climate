% Copyright (c) 2016, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{dirtree}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}
\usepackage{dirtree}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{pifont}
\usepackage{tikz}

\usetikzlibrary{chains,matrix,positioning,shapes,shadows,arrows,arrows.meta}

\tikzstyle{arrow} = [thick,->,>=stealth]
\tikzstyle{roundangle} = [rectangle, rounded corners, text centered, draw=black, fill=blue!10]
\tikzstyle{cons} = [
  rectangle split,
  rectangle split horizontal,
  rectangle split parts = 2,
  rounded corners,
  draw=black,
  fill=white,
]
\newcommand{\carcdr}[1]{\node (#1) [cons] {car \nodepart{second} cdr};}
\newcommand{\dottedcons}[1]{\node (#1) [cons] {. \nodepart{second} .};}
\newcommand{\dottedconsX}[2]{\node (#1) [cons,#2] {. \nodepart{second} .};}
\newcommand{\dottedconsB}[2]{\dottedconsX{#1}{below of=#2}}
\newcommand{\dottedconsLB}[2]{\dottedconsX{#1}{below left of = #2}}
\newcommand{\dottedconsRB}[2]{\dottedconsX{#1}{below right of = #2}}
\newcommand{\roundangle}[2]{\node (#1) [roundangle] {#2};}
\newcommand{\roundangleX}[3]{\node (#1) [roundangle,#3] {#2};}
\newcommand{\carline}[2]{\draw [arrow] (#1.one south) -- (#2);}
\newcommand{\carlineX}[3]{\draw [arrow,#3] (#1.one south) -- (#2);}
\newcommand{\cdrline}[2]{\draw [arrow] (#1.two south) -- (#2);}

\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\newcommand{\dtdir}[1]{%
  \includegraphics[height=0.75em,keepaspectratio=true]{manila-folder-bluebg.eps}%
  \textcolor{Blue}{#1}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.3,0.3,0.3}
\definecolor{keywordcolor}{rgb}{0.1,0.5,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\ttfamily,
  language=Lisp,
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true,
  numbers=left,
  numberstyle=\tiny\color{commentcolor},
  numbersep=5pt
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\shell}[1]{\texttt{\textbf{{\textcolor{Blue} \$}} #1}}

\newcommand{\xmark}{\textcolor{Red}{\ding{55}}}
\newcommand{\cmark}{\textcolor{Green}{\ding{51}}}

\newcommand{\SlideSection}[1]
{
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{#1}}}}
  \end{center}
}


\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.25in,keepaspectratio=true]{#1}
  \end{center}
}

\newcommand{\halfSlideImage}[1]{
  \includegraphics[width=2in,height=2.25in,keepaspectratio=true]{#1}
}

\newcommand{\halfSlideImageCentered}[1]{
  \begin{center}
    \halfSlideImage{#1}
  \end{center}
}

\newcommand{\rightSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{rightSideImage}[1]
{
  \renewcommand{\rightSideImageName}{#1}
  \begin{tabular}{lr}
    \begin{minipage}[b]{2in}
}
{
    \end{minipage}
    &
    \halfSlideImage{\rightSideImageName}
  \end{tabular}
}

\newcommand{\leftSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{leftSideImage}[1]
{
  \renewcommand{\leftSideImageName}{#1}
  \begin{tabular}{lr}
    \halfSlideImage{\leftSideImageName}
    &
    \begin{minipage}[b]{2in}
      \raggedright
}
{
    \end{minipage}
  \end{tabular}
}

\def\dout{\bgroup
 \markoverwith{\lower-0.2ex\hbox
 {\kern-.03em\vbox{\hrule width.2em\kern0.45ex\hrule}\kern-.03em}}%
 \ULon}
\MakeRobust\dout

\newpagestyle{cgore}{}{Chris Gore\hfil\thepage\hfil\texttt{cgore.com}}
\pagestyle{cgore}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\title{\psshadowbox{Clojure at Climate}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Thursday, October 27, {\smaller AD} 2016} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \color{\hc}

  \begin{center}
    \includegraphics[width=4in]{FullStackSTL.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{slide}
  \h{We write Clojure at The Climate Corporation,\\and we're hiring!  Come work
    with us!}
  \fullSlideImage{climate-logo-bluebg.eps}
\end{slide}



\begin{slide}
  \h{Especially now that Bayer is buying us!}
  \fullSlideImage{Bayer-logo-bluebg.eps}
\end{slide}


\begin{slide}
  \h{Clojure is Lisp}

  \fullSlideImage{mccarthy.eps}
\end{slide}


\begin{slide}
  \h{Clojure is Lisp on the JVM.}

  \fullSlideImage{java-yoda.eps}
\end{slide}


\begin{slide}
  \h{Building out a brand new Clojure app using Leiningen.}

  \fullSlideImage{leiningen-bluebg.eps}

  \texttt{lein new something}
\end{slide}


\begin{slide}
  \h{What did that make for us?}
\dirtree{%
.1 \dtdir{something}.
  .2 \dtdir{doc}.
    .3 intro.md.
  .2 \dtdir{resources}.
  .2 \dtdir{src}.
    .3 \dtdir{something}.
      .4 core.clj.
  .2 \dtdir{test}.
    .3 \dtdir{something}.
      .4 core\_test.clj.
  .2 CHANGELOG.md.
  .2 LICENSE.
  .2 README.md.
  .2 project.clj.
}
\end{slide}


\begin{slide}
  \h{\texttt{src/something/core.clj}}

\begin{lstlisting}
(ns something.core)

(defn foo
  "I don't do a whole lot."
  [x]
  (println x "Hello, World!"))
\end{lstlisting}

\end{slide}


\begin{slide}
  \h{\texttt{test/something/core\_test.clj}\\
  \textit{(You write tests, right?)}}

\begin{lstlisting}
(ns something.core-test
  (:require [clojure.test :refer :all]
            [something.core :refer :all]))

(deftest a-test
  (testing "FIXME, I fail."
    (is (= 0 1))))
  \end{lstlisting}
\end{slide}


\begin{slide}
  \h{\texttt{LICENSE}}

  This is defaulting to the Eclipse Public License, which you will maybe want to
  change.
\end{slide}


\begin{slide}
  \h{\texttt{README.md}}

  You should put some useful getting started info here, so that you can remember
  what to do in six months when you have to work on this component again.
\end{slide}


\begin{slide}
  \h{\texttt{project.clj}}

\begin{lstlisting}
(defproject something "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license
  {:name "Eclipse Public License"
   :url
   "http://www.eclipse.org/legal/epl-v10.html"}
  :dependencies [[org.clojure/clojure "1.8.0"]])
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Since Clojure is a Lisp, you probably want to use Emacs.  Because, nepotism.}

  \fullSlideImage{emacs-and-cider.eps}
\end{slide}

\begin{slide}
  \h{Hello, World!}

\begin{lstlisting}
(println "Hello, World!")
\end{lstlisting}

  That's it.

\end{slide}


\begin{slide}
  \h{Math is lispy of course.}

\begin{lstlisting}
(/ (+ (* 1 2 3)
      (* 4 5 6)
      (* 7 8 9 10))
   12.345)
;; => 418.46901579586876
\end{lstlisting}
\end{slide}         


\begin{slide}
  \h{There's Java classes underneath it all.}

\begin{lstlisting}
(type 123)
;; => java.lang.Long
(type "123")
;; => java.lang.String
(type (type "123"))
;; => java.lang.Class
(type [1 2 3 4 5])
;; => clojure.lang.PersistentVector
(type '(1 2 3 4 5))
;; => clojure.lang.PersistentList
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Java interop is pretty easy.}

\begin{lstlisting}
(.toUpperCase "stop shouting")
;; => "STOP SHOUTING"
(java.awt.Point. 1 2)
;; => #object[java.awt.Point
;;            0x4d59f5c5
;;            "java.awt.Point[x=1,y=2]"]
(.-x (java.awt.Point. 1 2))
;; => 1
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{But objects suck and hashmaps are awesome, so \texttt{bean} is your friend.}

\begin{lstlisting}
(bean java.awt.Color/BLUE)
;; =>
{:RGB -16776961,
 :alpha 255,
 :blue 255,
 :class java.awt.Color,
 :colorSpace #object[ ... ],
 :green 0,
 :red 0,
 :transparency 1}
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Ring is the most commonly used web application library in Clojure.}

  \texttt{https://github.com/ring-clojure/ring}

\begin{lstlisting}
(defproject something "0.1.0-SNAPSHOT"
  ...
  :dependencies [...
                 [ring "1.5.0"]
                 ...]
  :ring {:handler hello-world.core/handler
         :port 80}
  ...)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Ring is very simple in it's design.}

  \begin{description}
  \item [Requests] come in.
  \item [Responses] go out.
  \item [Handlers] map from requests to responses.
  \item [Middleware] adds functionality to the handlers.  Nearly all additional
    functionality can be implemented as just more middleware functions, it's
    nothing but function composition.
  \end{description}
\end{slide}


\begin{slide}
  \h{A super-basic Ring handler function.}

  Ring handlers map from requests to responses, both represented as hashmaps.
  
\begin{lstlisting}
(ns hello-world.core)

(defn handler [request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body "Hello World"})
\end{lstlisting}

  And then just\\
  \texttt{lein ring server}\\
  at the command line to start it up.
\end{slide}


\begin{slide}
  \h{Ring handler requests}

  \begin{description}
  \item [:server-port] The port handling the request.
  \item [:server-name] server name / IP address.
  \item [:remote-addr] The IP address of the client.
  \item [:uri] The request URI (the full path after the domain name).
  \item [:query-string] The query string, if present.
  \item [:scheme] The transport protocol, either :http or :https.
  \item [:request-method] The HTTP request method\\
    \textit{(:get, :head, :options, :put, :post, or :delete)}
  \item [:headers] An hashmap of lowercase header name strings to corresponding header value strings.
  \item [:body] An InputStream for the request body, if present.
  \end{description}
\end{slide}


\begin{slide}
  \h{Ring handler responses}

  \begin{description}
  \item [:status] HTTP status code \textit{(200, 404, 500, ...)}
  \item [:headers] hashmap of headers
  \item [:body] This can be a String, ISeq, File, or InputStream.
  \end{description}
\end{slide}


\begin{slide}
  \h{Ring middleware}

  Ring middleware are functions that add functionality to handlers.

\begin{lstlisting}
(defn wrap-content-type [handler content-type]
  (fn [request]
    (let [response (handler request)]
      (assoc-in response
                [:headers "Content-Type"]
                content-type))))
\end{lstlisting}

  The middleware function is taking in the handler function (and sometimes some
  additional arguments) and returning a new handler function.
\end{slide}


\begin{slide}
  \h{Using Ring middleware}

\begin{lstlisting}
(def app
  (wrap-content-type handler "text/html"))
\end{lstlisting}

  But you typically have more than one middleware, so the threading operator is
  our friend:

\begin{lstlisting}
(def app
  (-> handler
      (wrap-content-type "text/html")
      (wrap-keyword-params)
      (wrap-params)))
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{What exactly do we do at Climate?}

  \fullSlideImage{climate-web.eps}
\end{slide}


\begin{slide}
  \h{Basically, we take a lot of photos of corn from space: we're corn paparazzi.}

  \fullSlideImage{corn-paparazzi.eps}
\end{slide}


\begin{slide}
  \h{Satellite providers put up images for us to download.}

  \fullSlideImage{rapideye.eps}
\end{slide}


\begin{slide}
  \h{A bunch of Python code downloads the imagery we care about and stages it
    locally.}

  \fullSlideImage{python.eps}
\end{slide}


\begin{slide}
  \h{Scrapbook (in Clojure) slices and dices the imagery into a very clever
    database sitting on Amazon S3 and Amazon DynamoDB.}

  \fullSlideImage{tiled-map.eps}
\end{slide}


\begin{slide}
  \h{Toomie (in Ruby) realizes that imagery needs to be generated and tells
    Galactus.}
  
  \halfSlideImageCentered{silver-surfer.eps}
\end{slide}


\begin{slide}
  \h{Galactus (in Clojure) gets the image generation request, makes the images,
    and puts them in a different S3/DynamoDB system.}

  \fullSlideImage{Galactus}
\end{slide}


\begin{slide}
  \h{(Most of our backend systems are named after Marvel comics.)}

  \fullSlideImage{marvel.eps}
\end{slide}


\begin{slide}
  \SlideSection{Questions?}
\end{slide}

\end{document}
